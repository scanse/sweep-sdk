language: generic
sudo: required
dist: trusty

cache:
  directories:
  - $HOME/.stack

matrix:
  fast_finish: true

  include:
    - os: linux
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-6', 'cmake', 'python3', 'python3-pip', 'python3-setuptools', 'nodejs', 'npm', 'libsfml-dev', 'libprotobuf-dev', 'protobuf-compiler', 'libzmq-dev']
      env: CCOMPILER='gcc-6' CXXCOMPILER='g++-6'

    - os: linux
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-5', 'cmake', 'python3', 'python3-pip', 'python3-setuptools', 'nodejs', 'npm', 'libsfml-dev', 'libprotobuf-dev', 'protobuf-compiler', 'libzmq-dev']
      env: CCOMPILER='gcc-5' CXXCOMPILER='g++-5'

    - os: linux
      addons:
        apt:
          sources: ['llvm-toolchain-trusty-3.9']
          packages: ['clang-3.9', 'cmake', 'python3', 'python3-pip', 'python3-setuptools', 'nodejs', 'npm', 'libsfml-dev', 'libprotobuf-dev', 'protobuf-compiler', 'libzmq-dev']
      env: CCOMPILER='clang-3.9' CXXCOMPILER='clang++-3.9'

    - os: linux
      addons:
        apt:
          sources: ['llvm-toolchain-trusty-4.0']
          packages: ['clang-4.0', 'cmake', 'python3', 'python3-pip', 'python3-setuptools', 'nodejs', 'npm', 'libsfml-dev', 'libprotobuf-dev', 'protobuf-compiler', 'libzmq-dev']
      env: CCOMPILER='clang-4.0' CXXCOMPILER='clang++-4.0'

    - os: osx
      osx_image: xcode8.2
      node_js: 4
      env: CCOMPILER='clang' CXXCOMPILER='clang++'

    - os: osx
      osx_image: xcode8.2
      node_js: 6
      env: CCOMPILER='clang' CXXCOMPILER='clang++'

before_install:
  - export CC=${CCOMPILER} CXX=${CXXCOMPILER}
  - if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then sudo update-alternatives --install /usr/bin/node node /usr/bin/nodejs 10; fi
  - if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then brew update && brew install python3; fi
  - mkdir -p ~/.local/bin
  - export PATH=$HOME/.local/bin:$PATH
  - if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'; fi
  - if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then travis_retry curl -L https://www.stackage.org/stack/osx-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'; fi

install:
  # Make sure building libsweep works
  - pushd libsweep
  - mkdir -p build
  - cd build
  - cmake .. -DCMAKE_BUILD_TYPE=Debug
  - cmake --build .
  # Then build and install dummy library to test bindings against without device attached
  - cmake .. -DCMAKE_BUILD_TYPE=Debug -DDUMMY=On
  - cmake --build .
  - sudo cmake --build . --target install
  - if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then sudo ldconfig; fi
  - popd
  # Install Python bindings
  - pushd sweeppy
  - sudo python2 setup.py install
  - sudo python3 setup.py install
  - popd
  # Build Haskell bindings
  - pushd sweephs
  - stack --no-terminal --install-ghc build
  - popd

script:
  # Test libsweep examples against the dummy library
  - pushd libsweep/examples
  - mkdir build
  - cd build
  - cmake ..
  - cmake --build .
  - ./example-c /dev/ttyUSB0
  - ./example-c++ /dev/ttyUSB0
  - popd
  # Test SweepPy bindings against the dummy library
  - pushd sweeppy
  - python2 -m sweeppy /dev/ttyUSB0
  - python3 -m sweeppy /dev/ttyUSB0
  - popd
  # Test SweepJs bindings against the dummy library
  - pushd sweepjs
  - npm install
  - popd
  # Test Haskell bindings against dummy library
  - pushd sweephs
  - stack --no-terminal exec -- sweephs-exe "/dev/ttyUSB0"
  - popd
